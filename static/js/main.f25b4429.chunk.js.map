{"version":3,"sources":["index.js"],"names":["Square","props","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","style","winnerArr","includes","index","background","className","onClick","value","Board","i","_this","this","key","squares","finaly","_this2","temp","map","arr","renderSquare","push","parseInt","React","Component","Game","_this3","Object","D_react_tic_tac_toe_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","D_react_tic_tac_toe_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","D_react_tic_tac_toe_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","state","history","Array","fill","coordinates","stepNumber","xIsNext","ascendingOrder","slice","length","calculateWinner","result","judgeCoordinates","setState","concat","step","_this4","reverse","tsNumber","weightStyle","fontWeight","current","moves","ts","desc","jumpTo","status","handleClick","marginLeft","handleSort","tempResultArr","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","entries","Symbol","iterator","next","done","_ref3","_ref2","D_react_tic_tac_toe_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","tempIndex","err","return","lines","_lines$index","b","c","indexs","_lines$_index","copy","splice","indexOf","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f25b4429.chunk.js","sourcesContent":["import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\n// 添加一个可以升序或降序显示历史纪录的按钮\r\n// 当无人获胜时 显示一个平局 先判断当前是否获胜 再判断下一步是否什么符号 然后再接下来的ji\r\n// 打上标签\r\nfunction Square(props) {\r\n  return(\r\n    <button\r\n      style={(props.winnerArr && props.winnerArr.includes(props.index)) ? {background: '#ffb7b7'} : {} } \r\n      className=\"square\"\r\n      onClick={() => props.onClick()}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nclass Board extends React.Component {\r\n  renderSquare(i) {\r\n    return <Square\r\n              key = {i}\r\n              index={i}\r\n              winnerArr={this.props.winnerArr} \r\n              value={this.props.squares[i]}\r\n              onClick={()=>this.props.onClick(i)}/>;\r\n  }\r\n  // 一个是9个元素 3X3 的排列\r\n  render() {\r\n    let temp = [], finaly;\r\n    this.props.squares.map((value, index) => {\r\n      let arr = this.renderSquare(index);\r\n      if( index % 3 === 0) {\r\n        temp.push([]);\r\n      }\r\n      temp[parseInt(index/3)].push(arr);\r\n      return arr;\r\n    });\r\n    finaly = temp.map((value,index) => {\r\n      return (\r\n        <div key={index}>\r\n          {value}\r\n        </div>\r\n      );\r\n    });\r\n    return (\r\n      <div>\r\n        {finaly}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n// 历史纪录：每走一步就保存当前步的数组信息，回到某一步就是取出当前步的数组\r\nclass Game extends React.Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      history: [{\r\n          squares: Array(9).fill(null), // 步数的历史内容\r\n          coordinates: Array(2).fill(null) // 坐标历史\r\n      }],\r\n      stepNumber: 0, // 当前步数\r\n      xIsNext: true, // 下一步是'X'还是'O'\r\n      ascendingOrder: true\r\n    }\r\n  }\r\n  handleClick(i) {\r\n    // 这是点击小方格 需要改变的是历史数据数组 下一步出现的元素 步数\r\n    const history = this.state.history.slice(0, this.state.stepNumber+1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    if(calculateWinner(squares) || squares[i]) return;\r\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n    const coordinates = judgeCoordinates(i);\r\n    this.setState({\r\n      xIsNext: !this.state.xIsNext,\r\n      history: history.concat([{squares,coordinates}]),\r\n      stepNumber: history.length,\r\n    })\r\n  }\r\n  jumpTo(step) {\r\n    // 这是跳转到第几步 需要改变的就是第几步 判断下一步出现的元素是什么\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: (step % 2) === 0\r\n    });\r\n  }\r\n  handleSort() {\r\n    if(this.state.history.length === 1) return\r\n    this.setState({\r\n      ascendingOrder: !this.state.ascendingOrder\r\n    });\r\n  }\r\n  render() {\r\n    // 升序 降序：历史数组 倒序过来\r\n    // 现在的步数 倒序过来后 需要改变不\r\n    // 渲染函数 当数据发生变化的时候 重新渲染改变的部分 当前就是stepNumber style={weightStyle}\r\n    // 几个重点关注得东西 第一个现在是第几步 下一步是什么东西,现在得历史纪录数组, 现在得历史坐标数组\r\n    let ascendingOrder = this.state.ascendingOrder;\r\n    const history = ascendingOrder ? this.state.history.slice() : (this.state.history.slice().reverse());\r\n    let tsNumber = ascendingOrder ? this.state.stepNumber : history.length - this.state.stepNumber - 1;\r\n    const weightStyle = {fontWeight:'bolder'};\r\n    const current = history[tsNumber];\r\n    const winnerArr = calculateWinner(current.squares);\r\n    let moves = history.map((value, index) => {\r\n      let ts = ascendingOrder ? index : history.length -index -1;\r\n      let desc = ts ? `Go to move # ${ts} (${value.coordinates[0]},${value.coordinates[1]})` : 'Go to game start'\r\n      return (\r\n        <li key={ts}>\r\n          <button \r\n            onClick={() => this.jumpTo(ts)}\r\n            style={(history.length !== 1 && ts === this.state.stepNumber) ? weightStyle : {}}>\r\n              {desc}\r\n          </button>\r\n        </li>\r\n      );\r\n    });\r\n    let status = winnerArr ? (winnerArr.length ? `Winner: ${current.squares[winnerArr[0]]}` : '平局') : 'Next player: '+ (this.state.xIsNext ? 'X' : 'O');\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            winnerArr={winnerArr} \r\n            onClick={(i) => this.handleClick(i)}\r\n            squares={current.squares}/>\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>\r\n            {status}\r\n            <button \r\n              style={{marginLeft: 10+'px'}}\r\n              onClick={() => this.handleSort()}>\r\n                {ascendingOrder ? '降序的': '升序的'}\r\n            </button>\r\n          </div>\r\n          <ol>{moves}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nfunction calculateWinner(squares) {\r\n  // 获胜情况下的数组 只要这些数组里面有两个不同的情况 那就会产生平局\r\n  // 提前判断 三个数组剩下的时候 也是可能平局的 \r\n  let tempResultArr = [];\r\n  for(let [tempIndex, tempValue] of squares.entries()) {\r\n    if(!tempValue) tempResultArr.push(tempIndex);\r\n  }\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],  \r\n    [0, 3, 6],  \r\n    [1, 4, 7],  \r\n    [2, 5, 8],  \r\n    [0, 4, 8],\r\n    [2, 4, 6] \r\n  ]\r\n  for(let index in lines) {\r\n    const [a, b, c] = lines[index];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) return [a, b, c];\r\n  }\r\n  if(tempResultArr.length <= 3) {\r\n    let temp = 0;\r\n    for(let indexs in tempResultArr) {    \r\n      for(let index in lines) {\r\n        const [a, b, c] = lines[index];\r\n        if([a, b, c].includes(tempResultArr[indexs])) {\r\n          let copy = [a, b, c].slice();\r\n          copy.splice([a,b,c].indexOf(tempResultArr[indexs]),1);\r\n          if(squares[copy[0]] && squares[copy[0]] && squares[copy[0]]!== squares[copy[1]]) {\r\n           temp = 0;\r\n          } else {\r\n            temp = temp + 1;\r\n            break;\r\n          }\r\n        }\r\n      } \r\n      if(temp) break;\r\n    }\r\n    if(!temp) {\r\n      return [];\r\n    }\r\n  }\r\n  return null;\r\n}\r\nfunction judgeCoordinates(index) {\r\n  let result = []\r\n  switch (index) {\r\n    case 0:\r\n      result = [0, 0];\r\n      break;\r\n    case 1:\r\n      result = [0, 1];\r\n      break;\r\n    case 2:\r\n      result = [0, 2];\r\n      break;\r\n    case 3:\r\n      result = [1, 0];\r\n      break;\r\n    case 4:\r\n      result = [1, 1];\r\n      break;\r\n    case 5:\r\n      result = [1, 2];\r\n      break;\r\n    case 6:\r\n      result = [2, 0];\r\n      break;\r\n    case 7:\r\n      result = [2, 1];\r\n      break;\r\n    case 8:\r\n      result = [2, 2];\r\n      break;      \r\n    default:\r\n      result = [];\r\n  }\r\n  return result;   \r\n}\r\n// ========================================\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}